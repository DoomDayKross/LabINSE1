# 21110777, Đào Trung Kiên
# Lab #1: Buffer Overflow
# Task 1: Stack Smashing by memory overwritten 
## 1.1. Bof1.c
*To do a buffer overflow attack with the code bof1.c, we can see from the code that the program has an array with the size of 200 in the vuln function. So we need to input 204 characters(a buffer size of 200 bytes and an additional 4 bytes to overwrite the EBP register) followed by the address of the secretFunc() function to execute*  
-First we use: <span style="color:blue">gdb -q bof1.out</span> then <span style="color:blue">disas secretFunc </span> to find the address of secretFunc:<br>
<img width="726" alt="Screenshot 2023-05-02 165126" src="https://github.com/DoomDayKross/LabINSE1/blob/main/assets/Screenshot%202024-06-26%20213309.png?raw=true"><br><br>
-Then we create a payload.txt file with python command to input 204 characters and the address of secretFunc: <span style="color:blue"> python -c "print('a'*204+'\x6b\x84\x04\x08')" </span><br>
<img width="726" alt="Screenshot 2023-05-02 165126" src="https://github.com/DoomDayKross/LabINSE1/blob/main/assets/Screenshot%202024-06-26%20214540.png?raw=true"><br>
-We run the program with the payload.txt<br>
<img width="726" alt="Screenshot 2023-05-02 165126" src="https://github.com/DoomDayKross/LabINSE1/blob/main/assets/Screenshot%202024-06-26%2023033.png?raw=true"><br>
-Here you can see that we still receive 2 messages "Missing Arguments and Segmentation fault" <br>
-To solve the Missing argument we just need to put a random number next to ./bof1<br>
<img width="726" alt="Screenshot 2023-05-02 165126" src="https://github.com/DoomDayKross/LabINSE1/blob/main/assets/Screenshot%202024-06-26%20230604.png?raw=true"><br>
-To solve the last message we need to get the exit address<br>
<img width="726" alt="Screenshot 2023-05-02 165126" src="https://github.com/DoomDayKross/LabINSE1/blob/main/assets/Screenshot%202024-06-26%20231622.png?raw=true"><br>
-Put it in the payload next to the secretFunc address<br>
<img width="726" alt="Screenshot 2023-05-02 165126" src="https://github.com/DoomDayKross/LabINSE1/blob/main/assets/Screenshot%202024-06-26%20231915.png?raw=true"><br>
## 1.2. Bof2.c
*The goal here is to overflow the buffer buf in such a way that the value of check is changed to 0xdeadbeef. The buf array has a size of 40 bytes, and the variable check is located right after it in memory. By overflowing buf, you can overwrite check.*

-First we create a payload.txt file with python command input 40 characters to fill buf, followed by 0xdeadbeef in little-endian format: <span style="color:blue"> python -c 'print "A" * 40 + "\xef\xbe\xad\xde"' > payload.txt </span><br>
-Then we run the program with the payload.txt:
<img width="726" alt="Screenshot 2023-05-02 165126" src="https://github.com/DoomDayKross/LabINSE1/blob/main/assets/Screenshot%202024-06-26%20222946.png?raw=true">

## 1.3. Bof3.c
*The goal for this program is execute the shell function.*

-First we use: <span style="color:blue">gdb -q bof3</span> then <span style="color:blue">disas shell </span> to find the address of shell:<br>

<img width="726" alt="Screenshot 2023-05-02 165126" src="https://github.com/DoomDayKross/LabINSE1/blob/main/assets/Screenshot%202024-06-26%20223905.png?raw=true"><br><br>
-Then we create a payload.txt file with python command to input 128 characters and the address of shell: <span style="color:blue"> python -c "print('A'*128+'\x5b\x84\x04\x08')" </span><br>

<img width="726" alt="Screenshot 2023-05-02 165126" src="https://github.com/DoomDayKross/LabINSE1/blob/main/assets/Screenshot%202024-06-26%20224612.png?raw=true"><br>

<span style="color:blue">The buffer size is 128 bytes, and the fgets function will read up to 133 characters, including the null-terminating character. Therefore, the ideal input consists of 128 characters followed by 4 bytes representing the target address, plus the null-terminating character. The 4 extra bytes will precisely overflow and overwrite the func pointer's frame. When the program calls func, it will jump to the specified address.<br>
